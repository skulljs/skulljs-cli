describe("FindAll", () => {
	it("should return {{{props.model_name_pLc}}} (HttpClient called once)", (done: DoneFn) => {

		httpClientSpy.get.and.returnValue(defer(() => Promise.resolve(mock{{{props.model_name_pUcfirst}}})));

		{{{props.route_name_pLf}}}Service
			.findAll()
			.then(({{{props.model_name_pLc}}}) => {
				expect({{{props.model_name_pLc}}}).withContext("expected {{{props.model_name_pLc}}}").toEqual(mock{{{props.model_name_pUcfirst}}});
				done();
			})
			.catch((reason) => done.fail("Request should not fail !"));
		expect(httpClientSpy.get.calls.count()).withContext("one call").toBe(1);
	});
});

describe("FindOne", () => {
	it("should return a {{{props.model_name_sLc}}} (HttpClient called once)", (done: DoneFn) => {

		httpClientSpy.get.and.returnValue(defer(() => Promise.resolve(mock{{{props.model_name_sUcfirst}}})));

		{{{props.route_name_pLf}}}Service
			.findOne({{#if props.isPrimaryKeyNumber}}1{{else}}'1'{{/if}})
			.then(({{{props.model_name_sLc}}}) => {
				expect({{{props.model_name_sLc}}}).withContext("expected {{{props.model_name_sLc}}}").toEqual(mock{{{props.model_name_sUcfirst}}});
				done();
			})
			.catch((reason) => done.fail("Request should not fail !"));
		expect(httpClientSpy.get.calls.count()).withContext("one call").toBe(1);
	});
});
